题目：
An interpretable framework for clustering single-cell RNA-Seq datasets
单细胞RNA测序数据集聚类的可解释框架

摘要：
背景：随着单细胞RNA-Seq实验的最新发展，已经开发了几种方法来对所得数据集进行无监督分析。这些方法通常依赖于不直观的超参数（例如k-means，需要自己设置类的数量），并且没有明确解决与聚类相关的主观性。

结果：在这项工作中，我们提出了DendroSplit，这是一个可分析的框架，用于分析单细胞RNA-Seq数据集，该数据集解决了聚类的可解释性和聚类的主观性问题。 DendroSplit为“细胞类型”的定义所激发的单细胞RNA-Seq聚类问题提供了新颖的视角，使我们能够使用特征选择进行聚类以揭示数据中生物学上有意义的种群的多个水平。我们分析了几个具有里程碑意义的单细胞数据集，论证了该方法的功效和计算效率。

背景：
基因表达决定蛋白质的表达（进而决定细胞的功能），识别区分细胞类型的基因至关重要。

通用聚类算法，例如K-means，DBSCAN [24]，亲和力传播[25]和光谱聚类[26]，对于几个单细胞数据集[27]表现良好。但是，为了获得良好的性能，通常需要对数据集进行仔细的预处理，并且算法需要非直观的超参数调整。例如，K均值和频谱聚类都需要选择所需的聚类数量，DBSCAN则需要选择同一邻域中两个样本之间的最大距离，而亲和力传播则需要选择用于确定哪些点是示例和阻尼的偏好参数避免数值振荡的参数。

优点：
•基于基因的解释，用于在生成集群时做出的所有决策
•可解释的超参数
•能够廉价地为同一数据集产生多个聚类
•易于整合到现有的单细胞RNA-Seq工作流程中

工作流程：
端到端的DendroSplit工作流程如图1a所示。在预处理了N×M个表达矩阵X（其中N和M分别代表细胞和基因的数量）之后，我们生成了N×N距离矩阵D。
我们使用层次聚类根据细胞的成对距离对细胞进行迭代分组，从而获得树状图，树状的数据结构。拆分步骤从树的根部开始。树状图中的每个节点表示将一个较大的群集潜在地划分为两个较小的群集。如果此“分割”导致两个充分分离的群集（根据度量标准，我们称为“分隔分数”），则该分割被视为有效，并且算法将在新的群集上继续进行。


我们选择分离分数的依据是一个关键的假设：如果两个细胞群的类型不同，则应该至少存在一个在两个群之间差异表达的基因。

类似方法：
从树状图生成簇的最常见方法是简单地在某个固定高度水平切割树状图。这种僵化的方法通常无法为更复杂的数据集生成有意义的聚类。
动态树切割算法[40]增加了很大的灵活性，并基于自适应切割来处理树状图。
与DendroSplit不同，这两种算法都需要根据细微的标准选择不直观的超参数截止值。
Lake等人使用了最相似的集群方法。 [15]分析他们的人脑单细胞数据集。他们的方法符合DendroSplit框架，使用基于随机森林的分离分数。与上面提到的分离得分相比，该分离得分具有一定的随机性，在计算上要昂贵得多，并且需要较少的直观超参数选择。


执行：
1.	距离度量
使用相关距离。使用the scikit-learn Python package。
d(xi, xj) = 1 − r(xi, xj) 
2.	层次聚类
using the Scipy Python package 


数据预处理：
1.	对于所有单细胞数据集，我们将对数转换log10（X +1）应用于原始表达水平。本文分析了9个数据集。对于每个数据集，删除所有细胞中表达为0的基因。
2.	根据基因的离散度对基因进行z归一化，其中基因的离散度定义为方差除以均值。仅保留对应于高于某个临界值的z分数的基因。


代码理解：
1.	sklearn中的dbscan算法，一种密度聚类算法。参数部分：eps为样本距离，min_sample为样本点要成为核心对象所需要的𝜖-邻域的样本数阈值。聚类太少，eps-，min_sample+；聚类太多，eps+，min_sample-
2.	network: Python语言开发的图论与复杂网络建模工具，内置了常用的图与复杂网络分析算法，可以方便的进行复杂网络数据分析、仿真建模等工作。


代码：
1.	clustering.py
a)	skDBSCAN：调用sklearn中的DBSCAN，进行密度聚类算法
b)	AffinityProp：近邻传播聚类
c)	hclust：AgglomerativeClustering是scikit-learn提供的层级聚类算法模型。其中n_clusters指定粗的数量；connectivity指定一定数组或可调用对象，指定连接矩阵；affinity，计算距离；linkage指定链接算法
d)	SNN_Cliq：使用os.system调用Rc程序进行聚类
e)	generate_random_string：使用join，生成N位大写字母与数字的随机字符串

2.	evaluation.py
  a)	NMI：标准化互信息，判断分类的正确率
  b)	get_max_wt_matching：计算G的最大加权匹配。
  c)	compute_clustering_accuracy：计算正确率
    i.	np.unique：函数是去除数组中的重复数字，并进行排序之后输出。
